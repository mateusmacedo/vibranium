// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	errors "github.com/mateusmacedo/vibranium/validation/errors"
	mock "github.com/stretchr/testify/mock"
)

// MockPresenter is an autogenerated mock type for the Presenter type
type MockPresenter struct {
	mock.Mock
}

type MockPresenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPresenter) EXPECT() *MockPresenter_Expecter {
	return &MockPresenter_Expecter{mock: &_m.Mock}
}

// Present provides a mock function with given fields: _a0
func (_m *MockPresenter) Present(_a0 *errors.Errors) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Present")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*errors.Errors) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPresenter_Present_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Present'
type MockPresenter_Present_Call struct {
	*mock.Call
}

// Present is a helper method to define mock.On call
//   - _a0 *errors.Errors
func (_e *MockPresenter_Expecter) Present(_a0 interface{}) *MockPresenter_Present_Call {
	return &MockPresenter_Present_Call{Call: _e.mock.On("Present", _a0)}
}

func (_c *MockPresenter_Present_Call) Run(run func(_a0 *errors.Errors)) *MockPresenter_Present_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*errors.Errors))
	})
	return _c
}

func (_c *MockPresenter_Present_Call) Return(_a0 string) *MockPresenter_Present_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPresenter_Present_Call) RunAndReturn(run func(*errors.Errors) string) *MockPresenter_Present_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPresenter creates a new instance of MockPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPresenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPresenter {
	mock := &MockPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
