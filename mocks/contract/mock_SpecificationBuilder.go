// Code generated by mockery v2.43.1. DO NOT EDIT.

package contract

import (
	contract "github.com/mateusmacedo/vibranium/specification/contract"
	mock "github.com/stretchr/testify/mock"
)

// MockSpecificationBuilder is an autogenerated mock type for the SpecificationBuilder type
type MockSpecificationBuilder[T contract.Candidate] struct {
	mock.Mock
}

type MockSpecificationBuilder_Expecter[T contract.Candidate] struct {
	mock *mock.Mock
}

func (_m *MockSpecificationBuilder[T]) EXPECT() *MockSpecificationBuilder_Expecter[T] {
	return &MockSpecificationBuilder_Expecter[T]{mock: &_m.Mock}
}

// And provides a mock function with given fields: spec
func (_m *MockSpecificationBuilder[T]) And(spec contract.Specification[T]) contract.SpecificationBuilder[T] {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for And")
	}

	var r0 contract.SpecificationBuilder[T]
	if rf, ok := ret.Get(0).(func(contract.Specification[T]) contract.SpecificationBuilder[T]); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SpecificationBuilder[T])
		}
	}

	return r0
}

// MockSpecificationBuilder_And_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'And'
type MockSpecificationBuilder_And_Call[T contract.Candidate] struct {
	*mock.Call
}

// And is a helper method to define mock.On call
//   - spec contract.Specification[T]
func (_e *MockSpecificationBuilder_Expecter[T]) And(spec interface{}) *MockSpecificationBuilder_And_Call[T] {
	return &MockSpecificationBuilder_And_Call[T]{Call: _e.mock.On("And", spec)}
}

func (_c *MockSpecificationBuilder_And_Call[T]) Run(run func(spec contract.Specification[T])) *MockSpecificationBuilder_And_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contract.Specification[T]))
	})
	return _c
}

func (_c *MockSpecificationBuilder_And_Call[T]) Return(_a0 contract.SpecificationBuilder[T]) *MockSpecificationBuilder_And_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpecificationBuilder_And_Call[T]) RunAndReturn(run func(contract.Specification[T]) contract.SpecificationBuilder[T]) *MockSpecificationBuilder_And_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields:
func (_m *MockSpecificationBuilder[T]) Build() (contract.Specification[T], error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 contract.Specification[T]
	var r1 error
	if rf, ok := ret.Get(0).(func() (contract.Specification[T], error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() contract.Specification[T]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.Specification[T])
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpecificationBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockSpecificationBuilder_Build_Call[T contract.Candidate] struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockSpecificationBuilder_Expecter[T]) Build() *MockSpecificationBuilder_Build_Call[T] {
	return &MockSpecificationBuilder_Build_Call[T]{Call: _e.mock.On("Build")}
}

func (_c *MockSpecificationBuilder_Build_Call[T]) Run(run func()) *MockSpecificationBuilder_Build_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpecificationBuilder_Build_Call[T]) Return(_a0 contract.Specification[T], _a1 error) *MockSpecificationBuilder_Build_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpecificationBuilder_Build_Call[T]) RunAndReturn(run func() (contract.Specification[T], error)) *MockSpecificationBuilder_Build_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Not provides a mock function with given fields:
func (_m *MockSpecificationBuilder[T]) Not() contract.SpecificationBuilder[T] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Not")
	}

	var r0 contract.SpecificationBuilder[T]
	if rf, ok := ret.Get(0).(func() contract.SpecificationBuilder[T]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SpecificationBuilder[T])
		}
	}

	return r0
}

// MockSpecificationBuilder_Not_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Not'
type MockSpecificationBuilder_Not_Call[T contract.Candidate] struct {
	*mock.Call
}

// Not is a helper method to define mock.On call
func (_e *MockSpecificationBuilder_Expecter[T]) Not() *MockSpecificationBuilder_Not_Call[T] {
	return &MockSpecificationBuilder_Not_Call[T]{Call: _e.mock.On("Not")}
}

func (_c *MockSpecificationBuilder_Not_Call[T]) Run(run func()) *MockSpecificationBuilder_Not_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpecificationBuilder_Not_Call[T]) Return(_a0 contract.SpecificationBuilder[T]) *MockSpecificationBuilder_Not_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpecificationBuilder_Not_Call[T]) RunAndReturn(run func() contract.SpecificationBuilder[T]) *MockSpecificationBuilder_Not_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Or provides a mock function with given fields: spec
func (_m *MockSpecificationBuilder[T]) Or(spec contract.Specification[T]) contract.SpecificationBuilder[T] {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for Or")
	}

	var r0 contract.SpecificationBuilder[T]
	if rf, ok := ret.Get(0).(func(contract.Specification[T]) contract.SpecificationBuilder[T]); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SpecificationBuilder[T])
		}
	}

	return r0
}

// MockSpecificationBuilder_Or_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Or'
type MockSpecificationBuilder_Or_Call[T contract.Candidate] struct {
	*mock.Call
}

// Or is a helper method to define mock.On call
//   - spec contract.Specification[T]
func (_e *MockSpecificationBuilder_Expecter[T]) Or(spec interface{}) *MockSpecificationBuilder_Or_Call[T] {
	return &MockSpecificationBuilder_Or_Call[T]{Call: _e.mock.On("Or", spec)}
}

func (_c *MockSpecificationBuilder_Or_Call[T]) Run(run func(spec contract.Specification[T])) *MockSpecificationBuilder_Or_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contract.Specification[T]))
	})
	return _c
}

func (_c *MockSpecificationBuilder_Or_Call[T]) Return(_a0 contract.SpecificationBuilder[T]) *MockSpecificationBuilder_Or_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpecificationBuilder_Or_Call[T]) RunAndReturn(run func(contract.Specification[T]) contract.SpecificationBuilder[T]) *MockSpecificationBuilder_Or_Call[T] {
	_c.Call.Return(run)
	return _c
}

// WithSpecification provides a mock function with given fields: spec
func (_m *MockSpecificationBuilder[T]) WithSpecification(spec contract.Specification[T]) contract.SpecificationBuilder[T] {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for WithSpecification")
	}

	var r0 contract.SpecificationBuilder[T]
	if rf, ok := ret.Get(0).(func(contract.Specification[T]) contract.SpecificationBuilder[T]); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.SpecificationBuilder[T])
		}
	}

	return r0
}

// MockSpecificationBuilder_WithSpecification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithSpecification'
type MockSpecificationBuilder_WithSpecification_Call[T contract.Candidate] struct {
	*mock.Call
}

// WithSpecification is a helper method to define mock.On call
//   - spec contract.Specification[T]
func (_e *MockSpecificationBuilder_Expecter[T]) WithSpecification(spec interface{}) *MockSpecificationBuilder_WithSpecification_Call[T] {
	return &MockSpecificationBuilder_WithSpecification_Call[T]{Call: _e.mock.On("WithSpecification", spec)}
}

func (_c *MockSpecificationBuilder_WithSpecification_Call[T]) Run(run func(spec contract.Specification[T])) *MockSpecificationBuilder_WithSpecification_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contract.Specification[T]))
	})
	return _c
}

func (_c *MockSpecificationBuilder_WithSpecification_Call[T]) Return(_a0 contract.SpecificationBuilder[T]) *MockSpecificationBuilder_WithSpecification_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpecificationBuilder_WithSpecification_Call[T]) RunAndReturn(run func(contract.Specification[T]) contract.SpecificationBuilder[T]) *MockSpecificationBuilder_WithSpecification_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockSpecificationBuilder creates a new instance of MockSpecificationBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpecificationBuilder[T contract.Candidate](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpecificationBuilder[T] {
	mock := &MockSpecificationBuilder[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
